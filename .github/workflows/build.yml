# This is a basic workflow to help you get started with Actions

name: Build all

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}

      - name: Install dependencies
        run: sudo apt install python3-pyaudio ; pip install -r requirements.txt ; pip install pyinstaller

      - name: Build
        run: pyinstaller --onedir main.spec ; zip -r GlobalP2T_Linux.zip dist/main/

      - name: Get version tag
        run: echo "VERSION_TAG=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "GlobalP2T_Linux.zip"
          bodyFile: "CHANGELOG.md"
          token: ${{ github.token }}
          name: "Version ${{ env.VERSION_TAG }} (Linux)"
          tag: "v${{ env.VERSION_TAG }}l"

  build_windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}

      - name: Install dependencies
        run: pip install -r requirements.txt ; pip install pipwin pyinstaller ; pipwin install pyaudio

      - name: Build
        run: pyinstaller --onedir main.spec

      - name: Pack
        uses: Amadevus/pwsh-script@v2
        with:
          script: "Compress-Archive dist\\main GlobalP2T_Windows.zip"

      - name: Get version tag
        run: for /f %%i in ('type version.txt') do set version=%%i ; echo VERSION_TAG=%version% >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "GlobalP2T_Windows.zip"
          bodyFile: "CHANGELOG.md"
          token: ${{ github.token }}
          name: "Version ${{ env.VERSION_TAG }} (Windows)"
          tag: "v${{ env.VERSION_TAG }}w"
